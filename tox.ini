[tox]
envlist = py,test,coverage,lint,format,security,code-analysis,packaging-test

[testenv]
passenv = HOME
deps = pipenv
commands =
    pipenv install --dev


[testenv:tests]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
commands =
    {[testenv]commands}
    pipenv run pytest --html=./out/pytest/index.html --self-contained-html


[testenv:coverage]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
commands =
    {[testenv]commands}
    pipenv run coverage erase
    pipenv run coverage run -m pytest {posargs:tests}
    pipenv run coverage report
    pipenv run coverage html -d ./out/coverage


[testenv:lint]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
allowlist_externals = mkdir
commands =
    {[testenv]commands}
    pipenv run flake8 pre_commit_hook_collection tests --max-complexity 10
    pipenv run pylint pre_commit_hook_collection tests
    pipenv run mypy pre_commit_hook_collection tests --html-report ./out/mypy --any-exprs-report ./out/mypy/ --linecount-report ./out/mypy/ --linecoverage-report ./out/mypy/ --lineprecision-report ./out/mypy/


[testenv:format]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
commands =
    {[testenv]commands}
    pipenv run black pre_commit_hook_collection tests
    pipenv run isort pre_commit_hook_collection tests

[testenv:security]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
commands =
    {[testenv]commands}
    pipenv run bandit pre_commit_hook_collection tests -r  -ll


[testenv:code-analysis]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
commands =
    {[testenv]commands}
    pipenv run radon cc pre_commit_hook_collection tests -a
    pipenv run radon mi pre_commit_hook_collection tests
    pipenv run vulture pre_commit_hook_collection tests


[testenv:pre-commit]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}
commands =
    {[testenv]commands}
    pipenv run pre-commit run --all-files --show-diff-on-failure


[testenv:packaging-test]
passenv = HOME
skip_install = true
deps =
    {[testenv]deps}

commands =
    {[testenv]commands}
    pipenv run pyroma .
    pipenv run python3 -m build
    pipenv run twine check dist/*


[testenv:dev]
# usage: tox -e dev
passenv = HOME
deps =
    {[testenv]deps}
package = editable
commands =
    {[testenv]commands}
    pre-commit install
    pipenv shell
